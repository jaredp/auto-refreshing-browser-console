// Generated by CoffeeScript 1.6.3
(function() {
  var SourceWatcher, TerminalToHTML, WebSocketServer, app, broadcast, child_process, express, fs, rootDir, startServer, watcher, wss, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  child_process = require('child_process');

  express = require('express');

  app = express();

  app.use('/public', express["static"](__dirname + '/public'));

  WebSocketServer = require('ws').Server;

  wss = new WebSocketServer({
    port: 7001
  });

  broadcast = function(msg) {
    var client, _i, _len, _ref, _results;
    _ref = wss.clients;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      client = _ref[_i];
      _results.push(client.send(msg));
    }
    return _results;
  };

  startServer = function() {
    app.listen(7000);
    return console.log('Open http://localhost:7000 in Chrome\nPress Ctrl+C to exit');
  };

  TerminalToHTML = (function() {
    var lineEnd, lineStart, _ref;

    _ref = ['<div>', '</div>'], lineStart = _ref[0], lineEnd = _ref[1];

    function TerminalToHTML(_yield, textcolor, background, buffer) {
      this["yield"] = _yield != null ? _yield : (function() {});
      this.textcolor = textcolor != null ? textcolor : '';
      this.background = background != null ? background : '';
      this.buffer = buffer != null ? buffer : '';
      this.write = __bind(this.write, this);
    }

    TerminalToHTML.prototype.write = function(data) {
      var line, lines, _i, _len, _results;
      this.buffer += data.toString();
      lines = this.buffer.split('\n');
      this.buffer = lines.pop();
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        this["yield"](lineStart);
        this["yield"](line);
        _results.push(this["yield"](lineEnd));
      }
      return _results;
    };

    return TerminalToHTML;

  })();

  SourceWatcher = (function() {
    function SourceWatcher(dir, onchange, pauseCount) {
      this.dir = dir;
      this.onchange = onchange;
      this.pauseCount = pauseCount != null ? pauseCount : 0;
      this.watch();
    }

    SourceWatcher.prototype.watch = function() {
      return this.watcher = fs.watch(this.dir, this.onchange);
    };

    SourceWatcher.prototype.stop = function() {
      var _ref;
      if ((_ref = this.watcher) != null) {
        _ref.close();
      }
      return this.watcher = null;
    };

    SourceWatcher.prototype.pause = function() {
      if (this.pauseCount++ === 0) {
        return this.stop();
      }
    };

    SourceWatcher.prototype.unpause = function() {
      if (--this.pauseCount === 0) {
        return this.watch();
      }
    };

    return SourceWatcher;

  })();

  rootDir = (_ref = process.argv[2]) != null ? _ref : '.';

  watcher = new SourceWatcher(rootDir, function() {
    return broadcast('reload');
  });

  app.get('/', function(req, res) {
    return res.sendfile(__dirname + '/public/client.html');
  });

  app.get('/command', function(req, res) {
    var command, gcc, rewriter;
    if (!(command = req.query.q)) {
      return res.send(400);
    }
    res.writeHead(200);
    rewriter = new TerminalToHTML(function(html) {
      return res.write(html);
    });
    watcher.pause();
    gcc = child_process.spawn('bash', ['-c', command], {
      cwd: rootDir
    });
    gcc.stdout.on('data', rewriter.write);
    gcc.stderr.on('data', rewriter.write);
    gcc.on('close', function() {
      res.end();
      return setTimeout((function() {
        return watcher.unpause();
      }), 0);
    });
    return gcc.stdin.end();
  });

  startServer();

}).call(this);
